useDynLib(corpus, .registration = TRUE, .fixes = "C_")

# Imports
importFrom(Matrix, sparseMatrix)
importFrom(utils, str)

## Exports
export(as_text)
export(as_text.default)
export(is_text)
export(is_text.default)
export(read_ndjson)
export(sentences)
export(stopwords)
## export(text) # don't export, clashes with graphics::text
export(text_filter)
export(term_counts)
export(term_matrix)
export(tokens)

## Methods
S3method(`$`, corpus_json)
S3method(`$`, corpus_text)
S3method(`$<-`, corpus_json)
S3method(`$<-`, corpus_text)
S3method(`$<-`, text_filter)
S3method(`[`, corpus_json)
S3method(`[`, corpus_text)
S3method(`[<-`, corpus_json)
S3method(`[<-`, corpus_text)
S3method(`[<-`, text_filter)
S3method(`[[`, corpus_json)
S3method(`[[`, corpus_text)
S3method(`[[<-`, corpus_json)
S3method(`[[<-`, corpus_text)
S3method(`[[<-`, text_filter)
S3method(all.equal, corpus_text)
S3method(anyNA, corpus_text)
S3method(as.character, corpus_json)
S3method(as.character, corpus_text)
S3method(as.complex, corpus_text)
S3method(as.Date, corpus_text)
S3method(as.data.frame, corpus_json)
S3method(as.data.frame, corpus_text)
S3method(as.double, corpus_json)
S3method(as.integer, corpus_json)
S3method(as.list, corpus_json)
S3method(as.logical, corpus_json)
S3method(as.logical, corpus_text)
S3method(as_text, character)
S3method(as_text, corpus_json)
S3method(as_text, default)
S3method(dim, corpus_json)
S3method(dim, corpus_text)
S3method(dimnames, corpus_json)
S3method(is.character, corpus_text)
S3method(is.na, corpus_text)
S3method(is_text, default)
S3method(format, corpus_text)
S3method(length, corpus_json)
S3method(length, corpus_text)
S3method(names, corpus_json)
S3method(names, corpus_text)
S3method(`names<-`, corpus_json)
S3method(`names<-`, corpus_text)
S3method(Ops, corpus_text)
S3method(print, corpus_json)
S3method(print, corpus_text)
S3method(print, text_filter)
S3method(summary, corpus_text)
